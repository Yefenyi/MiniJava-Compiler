// Generated from MiniJava.g4 by ANTLR 4.4
package antlr4;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MiniJavaLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		EQUALS=1, NOTEQUALS=2, LT=3, GT=4, GEQ=5, LEQ=6, AND=7, OR=8, ADD=9, SUB=10, 
		DIVIDE=11, MULTPY=12, BANG=13, ASSIGN=14, DOT=15, LPREN=16, RPREN=17, 
		COMMA=18, LCURL=19, RCURL=20, LBRACKET=21, RBRACKET=22, SEMI=23, NEW=24, 
		THIS=25, NULL=26, TRUE=27, FALSE=28, CLASS=29, EXTENDS=30, PUBLIC=31, 
		STATIC=32, VOID=33, MAIN=34, STRING=35, RETURN=36, INT=37, BOOLEAN=38, 
		IF=39, ELSE=40, WHILE=41, SYSTEMPRINT=42, INTEGER=43, OPERATOR=44, DELIMITER=45, 
		ID=46, WS=47, COMMENT=48;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "'0'"
	};
	public static final String[] ruleNames = {
		"EQUALS", "NOTEQUALS", "LT", "GT", "GEQ", "LEQ", "AND", "OR", "ADD", "SUB", 
		"DIVIDE", "MULTPY", "BANG", "ASSIGN", "DOT", "LPREN", "RPREN", "COMMA", 
		"LCURL", "RCURL", "LBRACKET", "RBRACKET", "SEMI", "NEW", "THIS", "NULL", 
		"TRUE", "FALSE", "CLASS", "EXTENDS", "PUBLIC", "STATIC", "VOID", "MAIN", 
		"STRING", "RETURN", "INT", "BOOLEAN", "IF", "ELSE", "WHILE", "SYSTEMPRINT", 
		"INTEGER", "OPERATOR", "DELIMITER", "ID", "LETTER", "DIGIT", "NONZERODIGIT", 
		"WS", "COMMENT"
	};


	public MiniJavaLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "MiniJava.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 41: return SYSTEMPRINT_sempred((RuleContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean SYSTEMPRINT_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return !('A' <= _input.LA(1) && _input.LA(1) <= 'z' || '0' <= _input.LA(1) && _input.LA(1) <= '9');
		}
		return true;
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\62\u016c\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64"+
		"\t\64\3\2\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\7"+
		"\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3"+
		"\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25\3\25\3"+
		"\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3"+
		"\32\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3"+
		"\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3"+
		"\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3"+
		"\"\3\"\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3&\3&"+
		"\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3)\3)\3)\3)\3)\3*\3*\3"+
		"*\3*\3*\3*\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3"+
		"+\3+\3,\3,\7,\u011c\n,\f,\16,\u011f\13,\3,\5,\u0122\n,\3-\3-\3-\3-\3-"+
		"\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u0133\n-\3.\3.\3/\3/\3/\7/\u013a\n/"+
		"\f/\16/\u013d\13/\3\60\3\60\3\61\3\61\3\62\3\62\3\63\6\63\u0146\n\63\r"+
		"\63\16\63\u0147\3\63\5\63\u014b\n\63\3\63\3\63\3\64\3\64\3\64\3\64\7\64"+
		"\u0153\n\64\f\64\16\64\u0156\13\64\3\64\3\64\3\64\3\64\3\64\3\64\7\64"+
		"\u015e\n\64\f\64\16\64\u0161\13\64\3\64\7\64\u0164\n\64\f\64\16\64\u0167"+
		"\13\64\5\64\u0169\n\64\3\64\3\64\4\u0154\u015f\2\65\3\3\5\4\7\5\t\6\13"+
		"\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'"+
		"\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'"+
		"M(O)Q*S+U,W-Y.[/]\60_\2a\2c\2e\61g\62\3\2\t\6\2,-//\61\61>>\13\2*+..\60"+
		"\60==??]]__}}\177\177\4\2C\\c|\3\2\62;\3\2\63;\5\2\13\f\17\17\"\"\4\2"+
		"\f\f\17\17\u017a\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13"+
		"\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2"+
		"\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2"+
		"!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3"+
		"\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2"+
		"\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E"+
		"\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2"+
		"\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2"+
		"\2e\3\2\2\2\2g\3\2\2\2\3i\3\2\2\2\5l\3\2\2\2\7o\3\2\2\2\tq\3\2\2\2\13"+
		"s\3\2\2\2\rv\3\2\2\2\17y\3\2\2\2\21|\3\2\2\2\23\177\3\2\2\2\25\u0081\3"+
		"\2\2\2\27\u0083\3\2\2\2\31\u0085\3\2\2\2\33\u0087\3\2\2\2\35\u0089\3\2"+
		"\2\2\37\u008b\3\2\2\2!\u008d\3\2\2\2#\u008f\3\2\2\2%\u0091\3\2\2\2\'\u0093"+
		"\3\2\2\2)\u0095\3\2\2\2+\u0097\3\2\2\2-\u0099\3\2\2\2/\u009b\3\2\2\2\61"+
		"\u009d\3\2\2\2\63\u00a1\3\2\2\2\65\u00a6\3\2\2\2\67\u00ab\3\2\2\29\u00b0"+
		"\3\2\2\2;\u00b6\3\2\2\2=\u00bc\3\2\2\2?\u00c4\3\2\2\2A\u00cb\3\2\2\2C"+
		"\u00d2\3\2\2\2E\u00d7\3\2\2\2G\u00dc\3\2\2\2I\u00e3\3\2\2\2K\u00ea\3\2"+
		"\2\2M\u00ee\3\2\2\2O\u00f6\3\2\2\2Q\u00f9\3\2\2\2S\u00fe\3\2\2\2U\u0104"+
		"\3\2\2\2W\u0121\3\2\2\2Y\u0132\3\2\2\2[\u0134\3\2\2\2]\u0136\3\2\2\2_"+
		"\u013e\3\2\2\2a\u0140\3\2\2\2c\u0142\3\2\2\2e\u014a\3\2\2\2g\u0168\3\2"+
		"\2\2ij\7?\2\2jk\7?\2\2k\4\3\2\2\2lm\7#\2\2mn\7?\2\2n\6\3\2\2\2op\7>\2"+
		"\2p\b\3\2\2\2qr\7@\2\2r\n\3\2\2\2st\7@\2\2tu\7?\2\2u\f\3\2\2\2vw\7>\2"+
		"\2wx\7?\2\2x\16\3\2\2\2yz\7(\2\2z{\7(\2\2{\20\3\2\2\2|}\7~\2\2}~\7~\2"+
		"\2~\22\3\2\2\2\177\u0080\7-\2\2\u0080\24\3\2\2\2\u0081\u0082\7/\2\2\u0082"+
		"\26\3\2\2\2\u0083\u0084\7\61\2\2\u0084\30\3\2\2\2\u0085\u0086\7,\2\2\u0086"+
		"\32\3\2\2\2\u0087\u0088\7#\2\2\u0088\34\3\2\2\2\u0089\u008a\7?\2\2\u008a"+
		"\36\3\2\2\2\u008b\u008c\7\60\2\2\u008c \3\2\2\2\u008d\u008e\7*\2\2\u008e"+
		"\"\3\2\2\2\u008f\u0090\7+\2\2\u0090$\3\2\2\2\u0091\u0092\7.\2\2\u0092"+
		"&\3\2\2\2\u0093\u0094\7}\2\2\u0094(\3\2\2\2\u0095\u0096\7\177\2\2\u0096"+
		"*\3\2\2\2\u0097\u0098\7]\2\2\u0098,\3\2\2\2\u0099\u009a\7_\2\2\u009a."+
		"\3\2\2\2\u009b\u009c\7=\2\2\u009c\60\3\2\2\2\u009d\u009e\7p\2\2\u009e"+
		"\u009f\7g\2\2\u009f\u00a0\7y\2\2\u00a0\62\3\2\2\2\u00a1\u00a2\7v\2\2\u00a2"+
		"\u00a3\7j\2\2\u00a3\u00a4\7k\2\2\u00a4\u00a5\7u\2\2\u00a5\64\3\2\2\2\u00a6"+
		"\u00a7\7p\2\2\u00a7\u00a8\7w\2\2\u00a8\u00a9\7n\2\2\u00a9\u00aa\7n\2\2"+
		"\u00aa\66\3\2\2\2\u00ab\u00ac\7v\2\2\u00ac\u00ad\7t\2\2\u00ad\u00ae\7"+
		"w\2\2\u00ae\u00af\7g\2\2\u00af8\3\2\2\2\u00b0\u00b1\7h\2\2\u00b1\u00b2"+
		"\7c\2\2\u00b2\u00b3\7n\2\2\u00b3\u00b4\7u\2\2\u00b4\u00b5\7g\2\2\u00b5"+
		":\3\2\2\2\u00b6\u00b7\7e\2\2\u00b7\u00b8\7n\2\2\u00b8\u00b9\7c\2\2\u00b9"+
		"\u00ba\7u\2\2\u00ba\u00bb\7u\2\2\u00bb<\3\2\2\2\u00bc\u00bd\7g\2\2\u00bd"+
		"\u00be\7z\2\2\u00be\u00bf\7v\2\2\u00bf\u00c0\7g\2\2\u00c0\u00c1\7p\2\2"+
		"\u00c1\u00c2\7f\2\2\u00c2\u00c3\7u\2\2\u00c3>\3\2\2\2\u00c4\u00c5\7r\2"+
		"\2\u00c5\u00c6\7w\2\2\u00c6\u00c7\7d\2\2\u00c7\u00c8\7n\2\2\u00c8\u00c9"+
		"\7k\2\2\u00c9\u00ca\7e\2\2\u00ca@\3\2\2\2\u00cb\u00cc\7u\2\2\u00cc\u00cd"+
		"\7v\2\2\u00cd\u00ce\7c\2\2\u00ce\u00cf\7v\2\2\u00cf\u00d0\7k\2\2\u00d0"+
		"\u00d1\7e\2\2\u00d1B\3\2\2\2\u00d2\u00d3\7x\2\2\u00d3\u00d4\7q\2\2\u00d4"+
		"\u00d5\7k\2\2\u00d5\u00d6\7f\2\2\u00d6D\3\2\2\2\u00d7\u00d8\7o\2\2\u00d8"+
		"\u00d9\7c\2\2\u00d9\u00da\7k\2\2\u00da\u00db\7p\2\2\u00dbF\3\2\2\2\u00dc"+
		"\u00dd\7U\2\2\u00dd\u00de\7v\2\2\u00de\u00df\7t\2\2\u00df\u00e0\7k\2\2"+
		"\u00e0\u00e1\7p\2\2\u00e1\u00e2\7i\2\2\u00e2H\3\2\2\2\u00e3\u00e4\7t\2"+
		"\2\u00e4\u00e5\7g\2\2\u00e5\u00e6\7v\2\2\u00e6\u00e7\7w\2\2\u00e7\u00e8"+
		"\7t\2\2\u00e8\u00e9\7p\2\2\u00e9J\3\2\2\2\u00ea\u00eb\7k\2\2\u00eb\u00ec"+
		"\7p\2\2\u00ec\u00ed\7v\2\2\u00edL\3\2\2\2\u00ee\u00ef\7d\2\2\u00ef\u00f0"+
		"\7q\2\2\u00f0\u00f1\7q\2\2\u00f1\u00f2\7n\2\2\u00f2\u00f3\7g\2\2\u00f3"+
		"\u00f4\7c\2\2\u00f4\u00f5\7p\2\2\u00f5N\3\2\2\2\u00f6\u00f7\7k\2\2\u00f7"+
		"\u00f8\7h\2\2\u00f8P\3\2\2\2\u00f9\u00fa\7g\2\2\u00fa\u00fb\7n\2\2\u00fb"+
		"\u00fc\7u\2\2\u00fc\u00fd\7g\2\2\u00fdR\3\2\2\2\u00fe\u00ff\7y\2\2\u00ff"+
		"\u0100\7j\2\2\u0100\u0101\7k\2\2\u0101\u0102\7n\2\2\u0102\u0103\7g\2\2"+
		"\u0103T\3\2\2\2\u0104\u0105\7U\2\2\u0105\u0106\7{\2\2\u0106\u0107\7u\2"+
		"\2\u0107\u0108\7v\2\2\u0108\u0109\7g\2\2\u0109\u010a\7o\2\2\u010a\u010b"+
		"\7\60\2\2\u010b\u010c\7q\2\2\u010c\u010d\7w\2\2\u010d\u010e\7v\2\2\u010e"+
		"\u010f\7\60\2\2\u010f\u0110\7r\2\2\u0110\u0111\7t\2\2\u0111\u0112\7k\2"+
		"\2\u0112\u0113\7p\2\2\u0113\u0114\7v\2\2\u0114\u0115\7n\2\2\u0115\u0116"+
		"\7p\2\2\u0116\u0117\3\2\2\2\u0117\u0118\6+\2\2\u0118V\3\2\2\2\u0119\u011d"+
		"\5c\62\2\u011a\u011c\5a\61\2\u011b\u011a\3\2\2\2\u011c\u011f\3\2\2\2\u011d"+
		"\u011b\3\2\2\2\u011d\u011e\3\2\2\2\u011e\u0122\3\2\2\2\u011f\u011d\3\2"+
		"\2\2\u0120\u0122\7\62\2\2\u0121\u0119\3\2\2\2\u0121\u0120\3\2\2\2\u0122"+
		"X\3\2\2\2\u0123\u0133\t\2\2\2\u0124\u0125\7>\2\2\u0125\u0133\7?\2\2\u0126"+
		"\u0127\7@\2\2\u0127\u0133\7?\2\2\u0128\u0133\7@\2\2\u0129\u012a\7?\2\2"+
		"\u012a\u0133\7?\2\2\u012b\u012c\7#\2\2\u012c\u0133\7?\2\2\u012d\u012e"+
		"\7(\2\2\u012e\u0133\7(\2\2\u012f\u0130\7~\2\2\u0130\u0133\7~\2\2\u0131"+
		"\u0133\7#\2\2\u0132\u0123\3\2\2\2\u0132\u0124\3\2\2\2\u0132\u0126\3\2"+
		"\2\2\u0132\u0128\3\2\2\2\u0132\u0129\3\2\2\2\u0132\u012b\3\2\2\2\u0132"+
		"\u012d\3\2\2\2\u0132\u012f\3\2\2\2\u0132\u0131\3\2\2\2\u0133Z\3\2\2\2"+
		"\u0134\u0135\t\3\2\2\u0135\\\3\2\2\2\u0136\u013b\5_\60\2\u0137\u013a\5"+
		"_\60\2\u0138\u013a\5a\61\2\u0139\u0137\3\2\2\2\u0139\u0138\3\2\2\2\u013a"+
		"\u013d\3\2\2\2\u013b\u0139\3\2\2\2\u013b\u013c\3\2\2\2\u013c^\3\2\2\2"+
		"\u013d\u013b\3\2\2\2\u013e\u013f\t\4\2\2\u013f`\3\2\2\2\u0140\u0141\t"+
		"\5\2\2\u0141b\3\2\2\2\u0142\u0143\t\6\2\2\u0143d\3\2\2\2\u0144\u0146\t"+
		"\7\2\2\u0145\u0144\3\2\2\2\u0146\u0147\3\2\2\2\u0147\u0145\3\2\2\2\u0147"+
		"\u0148\3\2\2\2\u0148\u014b\3\2\2\2\u0149\u014b\5g\64\2\u014a\u0145\3\2"+
		"\2\2\u014a\u0149\3\2\2\2\u014b\u014c\3\2\2\2\u014c\u014d\b\63\2\2\u014d"+
		"f\3\2\2\2\u014e\u014f\7\61\2\2\u014f\u0150\7,\2\2\u0150\u0154\3\2\2\2"+
		"\u0151\u0153\13\2\2\2\u0152\u0151\3\2\2\2\u0153\u0156\3\2\2\2\u0154\u0155"+
		"\3\2\2\2\u0154\u0152\3\2\2\2\u0155\u0157\3\2\2\2\u0156\u0154\3\2\2\2\u0157"+
		"\u0158\7,\2\2\u0158\u0169\7\61\2\2\u0159\u015a\7\61\2\2\u015a\u015b\7"+
		"\61\2\2\u015b\u015f\3\2\2\2\u015c\u015e\13\2\2\2\u015d\u015c\3\2\2\2\u015e"+
		"\u0161\3\2\2\2\u015f\u0160\3\2\2\2\u015f\u015d\3\2\2\2\u0160\u0165\3\2"+
		"\2\2\u0161\u015f\3\2\2\2\u0162\u0164\n\b\2\2\u0163\u0162\3\2\2\2\u0164"+
		"\u0167\3\2\2\2\u0165\u0163\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0169\3\2"+
		"\2\2\u0167\u0165\3\2\2\2\u0168\u014e\3\2\2\2\u0168\u0159\3\2\2\2\u0169"+
		"\u016a\3\2\2\2\u016a\u016b\b\64\2\2\u016bh\3\2\2\2\16\2\u011d\u0121\u0132"+
		"\u0139\u013b\u0147\u014a\u0154\u015f\u0165\u0168\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}